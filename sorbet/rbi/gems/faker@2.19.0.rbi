# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faker` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Faker; end

class Faker::Address < ::Faker::Base
  class << self
    def building_number; end
    def city(legacy_options = T.unsafe(nil), options: T.unsafe(nil)); end
    def city_prefix; end
    def city_suffix; end
    def community; end
    def country; end
    def country_by_code(legacy_code = T.unsafe(nil), code: T.unsafe(nil)); end
    def country_code; end
    def country_code_long; end
    def country_name_to_code(legacy_name = T.unsafe(nil), name: T.unsafe(nil)); end
    def full_address; end
    def full_address_as_hash(*attrs, **attrs_params); end
    def latitude; end
    def longitude; end
    def mail_box; end
    def postcode(legacy_state_abbreviation = T.unsafe(nil), state_abbreviation: T.unsafe(nil)); end
    def secondary_address; end
    def state; end
    def state_abbr; end
    def street_address(legacy_include_secondary = T.unsafe(nil), include_secondary: T.unsafe(nil)); end
    def street_name; end
    def street_suffix; end
    def time_zone; end
    def zip(legacy_state_abbreviation = T.unsafe(nil), state_abbreviation: T.unsafe(nil)); end
    def zip_code(legacy_state_abbreviation = T.unsafe(nil), state_abbreviation: T.unsafe(nil)); end
  end
end

class Faker::Adjective < ::Faker::Base
  class << self
    def negative; end
    def positive; end
  end
end

class Faker::Alphanumeric < ::Faker::Base
  class << self
    def alpha(legacy_number = T.unsafe(nil), number: T.unsafe(nil)); end
    def alphanumeric(legacy_number = T.unsafe(nil), number: T.unsafe(nil), min_alpha: T.unsafe(nil), min_numeric: T.unsafe(nil)); end
  end
end

Faker::Alphanumeric::ALPHANUMS = T.let(T.unsafe(nil), Array)

class Faker::Ancient < ::Faker::Base
  class << self
    def god; end
    def hero; end
    def primordial; end
    def titan; end
  end
end

class Faker::App < ::Faker::Base
  class << self
    def author; end
    def name; end
    def semantic_version(legacy_major = T.unsafe(nil), legacy_minor = T.unsafe(nil), legacy_patch = T.unsafe(nil), major: T.unsafe(nil), minor: T.unsafe(nil), patch: T.unsafe(nil)); end
    def version; end
  end
end

class Faker::Appliance < ::Faker::Base
  class << self
    def brand; end
    def equipment; end
  end
end

class Faker::Artist < ::Faker::Base
  class << self
    def name; end
  end
end

class Faker::Australia < ::Faker::Base
  class << self
    def animal; end
    def location; end
    def state; end
  end
end

class Faker::Avatar < ::Faker::Base
  class << self
    def image(legacy_slug = T.unsafe(nil), legacy_size = T.unsafe(nil), legacy_format = T.unsafe(nil), legacy_set = T.unsafe(nil), legacy_bgset = T.unsafe(nil), slug: T.unsafe(nil), size: T.unsafe(nil), format: T.unsafe(nil), set: T.unsafe(nil), bgset: T.unsafe(nil)); end
  end
end

class Faker::Bank < ::Faker::Base
  class << self
    def account_number(legacy_digits = T.unsafe(nil), digits: T.unsafe(nil)); end
    def bsb_number; end
    def iban(legacy_country_code = T.unsafe(nil), country_code: T.unsafe(nil)); end
    def iban_country_code; end
    def name; end
    def routing_number; end
    def routing_number_with_format; end
    def swift_bic; end

    private

    def checksum(num_string); end
    def compile_bsb_number; end
    def compile_fraction(routing_num); end
    def compile_routing_number; end
    def iban_checksum(country_code, account); end
    def rand_numstring; end
    def valid_checksum?(routing_number, checksum); end
    def valid_routing_number; end
  end
end

class Faker::Barcode < ::Faker::Base
  class << self
    def ean(length = T.unsafe(nil)); end
    def ean_with_composite_symbology(length = T.unsafe(nil)); end
    def isbn; end
    def ismn; end
    def issn; end
    def upc_a; end
    def upc_a_with_composite_symbology; end
    def upc_e; end
    def upc_e_with_composite_symbology; end

    private

    def generate_barcode(key); end
    def generate_check_digit(odd_sum, even_sum); end
    def sum_even_odd(fake_num); end
  end
end

class Faker::Base
  class << self
    def bothify(string); end
    def disable_enforce_available_locales; end
    def fetch(key); end
    def fetch_all(key); end
    def flexible(key); end
    def letterify(letter_string); end
    def method_missing(mth, *args, &block); end
    def numerify(number_string, leading_zero: T.unsafe(nil)); end
    def parse(key); end
    def rand(max = T.unsafe(nil)); end
    def rand_in_range(from, to); end
    def regexify(reg); end
    def resolve(value); end
    def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
    def sample(list, num = T.unsafe(nil)); end
    def shuffle(list); end
    def translate(*args, **opts); end
    def unique(max_retries = T.unsafe(nil)); end
    def with_locale(tmp_locale = T.unsafe(nil), &block); end

    private

    def parse_caller(at); end
    def warn_for_deprecated_arguments; end
    def warn_with_uplevel(message, uplevel: T.unsafe(nil)); end
  end
end

module Faker::Base58
  class << self
    def encode(str); end
  end
end

Faker::Base::LLetters = T.let(T.unsafe(nil), Array)
Faker::Base::Letters = T.let(T.unsafe(nil), Array)
Faker::Base::Numbers = T.let(T.unsafe(nil), Array)
Faker::Base::ULetters = T.let(T.unsafe(nil), Array)

class Faker::Beer < ::Faker::Base
  class << self
    def alcohol; end
    def blg; end
    def hop; end
    def ibu; end
    def malts; end
    def name; end
    def style; end
    def yeast; end
  end
end

class Faker::Blockchain; end

class Faker::Blockchain::Aeternity < ::Faker::Base
  class << self
    def address; end
    def contract; end
    def oracle; end
    def transaction; end

    protected

    def rand_strings(length = T.unsafe(nil)); end
  end
end

class Faker::Blockchain::Bitcoin < ::Faker::Base
  class << self
    def address; end
    def testnet_address; end

    protected

    def address_for(network); end
  end
end

class Faker::Blockchain::Ethereum < ::Faker::Base
  class << self
    def address; end
  end
end

class Faker::Blockchain::Tezos < ::Faker::Base
  class << self
    def account; end
    def block; end
    def contract; end
    def operation; end
    def public_key; end
    def secret_key; end
    def signature; end

    protected

    def encode_tz(prefix, payload_size); end
  end
end

class Faker::Blood < ::Faker::Base
  class << self
    def group; end
    def rh_factor; end
    def type; end
  end
end

class Faker::Book < ::Faker::Base
  class << self
    def author; end
    def genre; end
    def publisher; end
    def title; end
  end
end

class Faker::Books; end

class Faker::Books::CultureSeries < ::Faker::Base
  class << self
    def book; end
    def civ; end
    def culture_ship; end
    def culture_ship_class; end
    def culture_ship_class_abv; end
    def planet; end
  end
end

class Faker::Books::Dune < ::Faker::Base
  class << self
    def character; end
    def city; end
    def planet; end
    def quote(legacy_character = T.unsafe(nil), character: T.unsafe(nil)); end
    def saying(legacy_source = T.unsafe(nil), source: T.unsafe(nil)); end
    def title; end
  end
end

class Faker::Books::Lovecraft < ::Faker::Base
  class << self
    def deity; end
    def fhtagn(legacy_number = T.unsafe(nil), number: T.unsafe(nil)); end
    def location; end
    def paragraph(legacy_sentence_count = T.unsafe(nil), legacy_random_sentences_to_add = T.unsafe(nil), sentence_count: T.unsafe(nil), random_sentences_to_add: T.unsafe(nil)); end
    def paragraph_by_chars(legacy_characters = T.unsafe(nil), characters: T.unsafe(nil)); end
    def paragraphs(legacy_number = T.unsafe(nil), number: T.unsafe(nil)); end
    def sentence(legacy_word_count = T.unsafe(nil), legacy_random_words_to_add = T.unsafe(nil), word_count: T.unsafe(nil), random_words_to_add: T.unsafe(nil), open_compounds_allowed: T.unsafe(nil)); end
    def sentences(legacy_number = T.unsafe(nil), number: T.unsafe(nil)); end
    def tome; end
    def word; end
    def words(legacy_number = T.unsafe(nil), legacy_spaces_allowed = T.unsafe(nil), number: T.unsafe(nil), spaces_allowed: T.unsafe(nil)); end
  end
end

class Faker::Boolean < ::Faker::Base
  class << self
    def boolean(legacy_true_ratio = T.unsafe(nil), true_ratio: T.unsafe(nil)); end
  end
end

class Faker::BossaNova < ::Faker::Base
  class << self
    def artist; end
    def song; end
  end
end

class Faker::Business < ::Faker::Base
  class << self
    def credit_card_expiry_date; end
    def credit_card_number; end
    def credit_card_type; end
  end
end

class Faker::Camera < ::Faker::Base
  class << self
    def brand; end
    def brand_with_model; end
    def model; end
  end
end

class Faker::Cannabis < ::Faker::Base
  class << self
    def brand; end
    def buzzword; end
    def cannabinoid; end
    def cannabinoid_abbreviation; end
    def category; end
    def health_benefit; end
    def medical_use; end
    def strain; end
    def terpene; end
    def type; end
  end
end

module Faker::Char
  class << self
    def fix_umlauts(string); end
    def prepare(string); end
    def romanize_cyrillic(string); end
  end
end

class Faker::ChileRut < ::Faker::Base
  class << self
    def check_digit; end
    def dv; end
    def full_rut(legacy_min_rut = T.unsafe(nil), legacy_fixed = T.unsafe(nil), min_rut: T.unsafe(nil), fixed: T.unsafe(nil)); end
    def last_rut; end
    def rut(legacy_min_rut = T.unsafe(nil), legacy_fixed = T.unsafe(nil), min_rut: T.unsafe(nil), fixed: T.unsafe(nil)); end
  end
end

class Faker::ChuckNorris < ::Faker::Base
  class << self
    def fact; end
  end
end

class Faker::Code < ::Faker::Base
  class << self
    def asin; end
    def ean(legacy_base = T.unsafe(nil), base: T.unsafe(nil)); end
    def imei; end
    def isbn(legacy_base = T.unsafe(nil), base: T.unsafe(nil)); end
    def npi; end
    def nric(legacy_min_age = T.unsafe(nil), legacy_max_age = T.unsafe(nil), min_age: T.unsafe(nil), max_age: T.unsafe(nil)); end
    def rut; end
    def sin; end

    private

    def generate_base10_isbn; end
    def generate_base13_ean; end
    def generate_base13_isbn; end
    def generate_base8_ean; end
    def generate_imei; end
    def generate_nric_check_alphabet(values, prefix); end
    def generate_sin_check_digit(digits); end
    def rut_verificator_digit(rut); end
    def sum(values); end
  end
end

class Faker::Coffee < ::Faker::Base
  class << self
    def blend_name; end
    def intensifier; end
    def notes; end
    def origin; end
    def variety; end

    private

    def search_format(key); end
  end
end

class Faker::Coin < ::Faker::Base
  class << self
    def flip; end
    def name; end
  end
end

class Faker::Color < ::Faker::Base
  class << self
    def color_name; end
    def hex_color; end
    def hsl_color; end
    def hsla_color; end
    def rgb_color; end
    def single_rgb_color; end
  end
end

class Faker::Commerce < ::Faker::Base
  class << self
    def brand; end
    def color; end
    def department(legacy_max = T.unsafe(nil), legacy_fixed_amount = T.unsafe(nil), max: T.unsafe(nil), fixed_amount: T.unsafe(nil)); end
    def material; end
    def price(legacy_range = T.unsafe(nil), legacy_as_string = T.unsafe(nil), range: T.unsafe(nil), as_string: T.unsafe(nil)); end
    def product_name; end
    def promotion_code(legacy_digits = T.unsafe(nil), digits: T.unsafe(nil)); end
    def vendor; end

    private

    def categories(num); end
    def merge_categories(categories); end
  end
end

class Faker::Company < ::Faker::Base
  class << self
    def australian_business_number; end
    def brazilian_company_number(legacy_formatted = T.unsafe(nil), formatted: T.unsafe(nil)); end
    def bs; end
    def buzzword; end
    def catch_phrase; end
    def czech_organisation_number; end
    def duns_number; end
    def ein; end
    def french_siren_number; end
    def french_siret_number; end
    def industry; end
    def logo; end
    def name; end
    def norwegian_organisation_number; end
    def polish_register_of_national_economy(legacy_length = T.unsafe(nil), length: T.unsafe(nil)); end
    def polish_taxpayer_identification_number; end
    def profession; end
    def russian_tax_number(region: T.unsafe(nil), type: T.unsafe(nil)); end
    def sic_code; end
    def south_african_close_corporation_registration_number; end
    def south_african_listed_company_registration_number; end
    def south_african_pty_ltd_registration_number; end
    def south_african_trust_registration_number; end
    def spanish_organisation_number(organization_type: T.unsafe(nil)); end
    def suffix; end
    def swedish_organisation_number; end
    def type; end

    private

    def abn_checksum(abn); end
    def collect_regon_sum(array); end
    def inn_checksum(factor, number); end
    def inn_number(region, type); end
    def luhn_algorithm(number); end
    def mod11(number); end
    def spanish_b_algorithm(value); end
    def spanish_cif_control_digit(organization_type, code); end
    def weight_sum(array, weights); end
  end
end

class Faker::Compass < ::Faker::Base
  class << self
    def abbreviation; end
    def azimuth; end
    def cardinal; end
    def cardinal_abbreviation; end
    def cardinal_azimuth; end
    def direction; end
    def half_wind; end
    def half_wind_abbreviation; end
    def half_wind_azimuth; end
    def ordinal; end
    def ordinal_abbreviation; end
    def ordinal_azimuth; end
    def quarter_wind; end
    def quarter_wind_abbreviation; end
    def quarter_wind_azimuth; end
  end
end

class Faker::Computer < ::Faker::Base
  class << self
    def os(platform: T.unsafe(nil)); end
    def platform; end
    def stack; end
    def type; end
  end
end

module Faker::Config
  class << self
    def locale; end
    def locale=(_arg0); end
    def own_locale; end
    def random; end
    def random=(_arg0); end
  end
end

class Faker::Construction < ::Faker::Base
  class << self
    def heavy_equipment; end
    def material; end
    def role; end
    def standard_cost_code; end
    def subcontract_category; end
    def trade; end
  end
end

class Faker::Cosmere < ::Faker::Base
  class << self
    def allomancer; end
    def aon; end
    def feruchemist; end
    def herald; end
    def knight_radiant; end
    def metal; end
    def shard; end
    def shard_world; end
    def spren; end
    def surge; end
  end
end

class Faker::Creature; end

class Faker::Creature::Animal < ::Faker::Base
  class << self
    def name; end
  end
end

class Faker::Creature::Bird < ::Faker::Base
  class << self
    def adjective; end
    def anatomy; end
    def anatomy_past_tense; end
    def color; end
    def common_family_name; end
    def common_name(tax_order = T.unsafe(nil)); end
    def emotional_adjective; end
    def geo; end
    def implausible_common_name; end
    def order; end
    def order_with_common_name(tax_order = T.unsafe(nil)); end
    def plausible_common_name; end
    def silly_adjective; end
  end
end

class Faker::Creature::Cat < ::Faker::Base
  class << self
    def breed; end
    def name; end
    def registry; end
  end
end

class Faker::Creature::Dog < ::Faker::Base
  class << self
    def age; end
    def breed; end
    def coat_length; end
    def gender; end
    def meme_phrase; end
    def name; end
    def size; end
    def sound; end
  end
end

class Faker::Creature::Horse < ::Faker::Base
  class << self
    def breed; end
    def name; end
  end
end

class Faker::Crypto < ::Faker::Base
  class << self
    def md5; end
    def sha1; end
    def sha256; end
    def sha512; end
  end
end

class Faker::CryptoCoin < ::Faker::Base
  class << self
    def acronym(legacy_coin = T.unsafe(nil), coin: T.unsafe(nil)); end
    def coin_array; end
    def coin_hash; end
    def coin_name(legacy_coin = T.unsafe(nil), coin: T.unsafe(nil)); end
    def url_logo(legacy_coin = T.unsafe(nil), coin: T.unsafe(nil)); end
  end
end

class Faker::Currency < ::Faker::Base
  class << self
    def code; end
    def name; end
    def symbol; end
  end
end

class Faker::Date < ::Faker::Base
  class << self
    def backward(legacy_days = T.unsafe(nil), days: T.unsafe(nil)); end
    def between(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), from:, to:); end
    def between_except(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), legacy_excepted = T.unsafe(nil), from:, to:, excepted:); end
    def birthday(legacy_min_age = T.unsafe(nil), legacy_max_age = T.unsafe(nil), min_age: T.unsafe(nil), max_age: T.unsafe(nil)); end
    def forward(legacy_days = T.unsafe(nil), days: T.unsafe(nil)); end
    def in_date_period(month: T.unsafe(nil), year: T.unsafe(nil)); end

    private

    def birthday_date(date, age); end
    def get_date_object(date); end
  end
end

class Faker::DcComics < ::Faker::Base
  class << self
    def hero; end
    def heroine; end
    def name; end
    def title; end
    def villain; end
  end
end

class Faker::Demographic < ::Faker::Base
  class << self
    def demonym; end
    def educational_attainment; end
    def height(legacy_unit = T.unsafe(nil), unit: T.unsafe(nil)); end
    def marital_status; end
    def race; end
    def sex; end
  end
end

class Faker::Dessert < ::Faker::Base
  class << self
    def flavor; end
    def topping; end
    def variety; end
  end
end

class Faker::Device < ::Faker::Base
  class << self
    def build_number; end
    def manufacturer; end
    def model_name; end
    def platform; end
    def serial; end
    def version; end
  end
end

class Faker::DrivingLicence < ::Faker::Base
  class << self
    def british_driving_licence(legacy_last_name = T.unsafe(nil), legacy_initials = T.unsafe(nil), legacy_gender = T.unsafe(nil), legacy_date_of_birth = T.unsafe(nil), last_name: T.unsafe(nil), initials: T.unsafe(nil), gender: T.unsafe(nil), date_of_birth: T.unsafe(nil)); end
    def northern_irish_driving_licence; end
    def uk_driving_licence(*args); end
    def usa_driving_licence(state = T.unsafe(nil)); end

    private

    def gb_licence_checksum; end
    def gb_licence_padding(str, num_chars); end
    def gb_licence_year(dob, gender); end
    def random_gender; end
  end
end

Faker::DrivingLicence::GB_PADDING = T.let(T.unsafe(nil), String)
Faker::DrivingLicence::NI_CHANCE = T.let(T.unsafe(nil), Float)

class Faker::Drone < ::Faker::Base
  class << self
    def battery_capacity; end
    def battery_type; end
    def battery_voltage; end
    def battery_weight; end
    def charging_temperature; end
    def flight_time; end
    def iso; end
    def max_altitude; end
    def max_angular_velocity; end
    def max_ascent_speed; end
    def max_charging_power; end
    def max_descent_speed; end
    def max_flight_distance; end
    def max_resolution; end
    def max_shutter_speed; end
    def max_speed; end
    def max_tilt_angle; end
    def max_wind_resistance; end
    def min_shutter_speed; end
    def name; end
    def operating_temperature; end
    def photo_format; end
    def shutter_speed_range; end
    def video_format; end
    def weight; end
  end
end

class Faker::Educator < ::Faker::Base
  class << self
    def campus; end
    def course; end
    def course_name; end
    def degree; end
    def primary_school; end
    def secondary_school; end
    def subject; end
    def university; end
  end
end

class Faker::ElectricalComponents < ::Faker::Base
  class << self
    def active; end
    def electromechanical; end
    def passive; end
  end
end

class Faker::Emotion < ::Faker::Base
  class << self
    def adjective; end
    def noun; end
  end
end

class Faker::Esport < ::Faker::Base
  class << self
    def event; end
    def game; end
    def league; end
    def player; end
    def team; end
  end
end

class Faker::Fantasy; end

class Faker::Fantasy::Tolkien < ::Faker::Base
  class << self
    def character; end
    def location; end
    def poem; end
    def race; end
  end
end

class Faker::File < ::Faker::Base
  class << self
    def dir(legacy_segment_count = T.unsafe(nil), legacy_root = T.unsafe(nil), legacy_directory_separator = T.unsafe(nil), segment_count: T.unsafe(nil), root: T.unsafe(nil), directory_separator: T.unsafe(nil)); end
    def extension; end
    def file_name(legacy_dir = T.unsafe(nil), legacy_name = T.unsafe(nil), legacy_ext = T.unsafe(nil), legacy_directory_separator = T.unsafe(nil), dir: T.unsafe(nil), name: T.unsafe(nil), ext: T.unsafe(nil), directory_separator: T.unsafe(nil)); end
    def mime_type; end
  end
end

class Faker::Fillmurray < ::Faker::Base
  class << self
    def image(legacy_grayscale = T.unsafe(nil), legacy_width = T.unsafe(nil), legacy_height = T.unsafe(nil), grayscale: T.unsafe(nil), width: T.unsafe(nil), height: T.unsafe(nil)); end
  end
end

class Faker::Finance < ::Faker::Base
  class << self
    def credit_card(*types); end
    def stock_market; end
    def ticker(*markets); end
    def vat_number(legacy_country = T.unsafe(nil), country: T.unsafe(nil)); end
    def vat_number_keys; end
  end
end

Faker::Finance::CREDIT_CARD_TYPES = T.let(T.unsafe(nil), Array)
Faker::Finance::MARKET_LIST = T.let(T.unsafe(nil), Array)

class Faker::Food < ::Faker::Base
  class << self
    def description; end
    def dish; end
    def ethnic_category; end
    def fruits; end
    def ingredient; end
    def measurement; end
    def metric_measurement; end
    def spice; end
    def vegetables; end
  end
end

class Faker::FunnyName < ::Faker::Base
  class << self
    def four_word_name; end
    def name; end
    def name_with_initial; end
    def three_word_name; end
    def two_word_name; end
  end
end

class Faker::Game < ::Faker::Base
  class << self
    def genre; end
    def platform; end
    def title; end
  end
end

class Faker::Games; end

class Faker::Games::ClashOfClans < ::Faker::Base
  class << self
    def defensive_building; end
    def rank; end
    def troop; end
  end
end

class Faker::Games::Control < ::Faker::Base
  class << self
    def altered_item; end
    def altered_world_event; end
    def character; end
    def hiss; end
    def location; end
    def object_of_power; end
    def quote; end
    def the_board; end
  end
end

class Faker::Games::DnD < ::Faker::Base
  class << self
    def alignment; end
    def background; end
    def city; end
    def klass; end
    def language; end
    def melee_weapon; end
    def monster; end
    def race; end
    def ranged_weapon; end
    def species; end
  end
end

class Faker::Games::Dota < ::Faker::Base
  class << self
    def building; end
    def hero; end
    def item; end
    def player; end
    def quote(legacy_hero = T.unsafe(nil), hero: T.unsafe(nil)); end
    def team; end
  end
end

class Faker::Games::ElderScrolls < ::Faker::Base
  class << self
    def city; end
    def creature; end
    def dragon; end
    def first_name; end
    def jewelry; end
    def last_name; end
    def name; end
    def race; end
    def region; end
    def weapon; end
  end
end

class Faker::Games::Fallout < ::Faker::Base
  class << self
    def character; end
    def faction; end
    def location; end
    def quote; end
  end
end

class Faker::Games::HalfLife < ::Faker::Base
  class << self
    def character; end
    def enemy; end
    def location; end
  end
end

class Faker::Games::Heroes < ::Faker::Base
  class << self
    def artifact; end
    def klass; end
    def name; end
    def specialty; end
  end
end

class Faker::Games::HeroesOfTheStorm < ::Faker::Base
  class << self
    def battleground; end
    def class; end
    def class_name; end
    def hero; end
    def quote; end
  end
end

class Faker::Games::LeagueOfLegends < ::Faker::Base
  class << self
    def champion; end
    def location; end
    def masteries; end
    def quote; end
    def rank; end
    def summoner_spell; end
  end
end

class Faker::Games::Minecraft < ::Faker::Base
  class << self
    def achievement; end
    def biome; end
    def block; end
    def enchantment; end
    def game_mode; end
    def item; end
    def mob; end
    def status_effect; end
  end
end

class Faker::Games::Myst < ::Faker::Base
  class << self
    def age; end
    def character; end
    def creature; end
    def game; end
    def quote; end
  end
end

class Faker::Games::Overwatch < ::Faker::Base
  class << self
    def hero; end
    def location; end
    def quote; end
  end
end

class Faker::Games::Pokemon < ::Faker::Base
  class << self
    def location; end
    def move; end
    def name; end
  end
end

class Faker::Games::SonicTheHedgehog < ::Faker::Base
  class << self
    def character; end
    def game; end
    def zone; end
  end
end

class Faker::Games::StreetFighter < ::Faker::Base
  class << self
    def character; end
    def move; end
    def quote; end
    def stage; end
  end
end

class Faker::Games::SuperMario < ::Faker::Base
  class << self
    def character; end
    def game; end
    def location; end
  end
end

class Faker::Games::SuperSmashBros < ::Faker::Base
  class << self
    def fighter; end
    def stage; end
  end
end

class Faker::Games::Touhou < ::Faker::Base
  class << self
    def character; end
    def game; end
    def location; end
    def song; end
    def spell_card; end
  end
end

class Faker::Games::WarhammerFantasy < ::Faker::Base
  class << self
    def creature; end
    def faction; end
    def hero; end
    def location; end
    def quote; end
  end
end

class Faker::Games::Witcher < ::Faker::Base
  class << self
    def book; end
    def character; end
    def location; end
    def monster; end
    def potion; end
    def quote; end
    def school; end
    def sign; end
    def witcher; end
  end
end

class Faker::Games::WorldOfWarcraft < ::Faker::Base
  class << self
    def class_name; end
    def hero; end
    def quote; end
    def race; end
  end
end

class Faker::Games::Zelda < ::Faker::Base
  class << self
    def character; end
    def game; end
    def item; end
    def location; end
  end
end

class Faker::Gender < ::Faker::Base
  class << self
    def binary_type; end
    def short_binary_type; end
    def type; end
  end
end

class Faker::GreekPhilosophers < ::Faker::Base
  class << self
    def name; end
    def quote; end
  end
end

class Faker::Hacker < ::Faker::Base
  class << self
    def abbreviation; end
    def adjective; end
    def ingverb; end
    def noun; end
    def phrases; end
    def say_something_smart; end
    def verb; end
  end
end

class Faker::Hipster < ::Faker::Base
  class << self
    def paragraph(legacy_sentence_count = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), legacy_random_sentences_to_add = T.unsafe(nil), sentence_count: T.unsafe(nil), supplemental: T.unsafe(nil), random_sentences_to_add: T.unsafe(nil)); end
    def paragraph_by_chars(legacy_characters = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), characters: T.unsafe(nil), supplemental: T.unsafe(nil)); end
    def paragraphs(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil)); end
    def sentence(legacy_word_count = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), legacy_random_words_to_add = T.unsafe(nil), word_count: T.unsafe(nil), supplemental: T.unsafe(nil), random_words_to_add: T.unsafe(nil), open_compounds_allowed: T.unsafe(nil)); end
    def sentences(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil)); end
    def word; end
    def words(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), legacy_spaces_allowed = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil), spaces_allowed: T.unsafe(nil)); end
  end
end

class Faker::Hobby < ::Faker::Base
  class << self
    def activity; end
  end
end

class Faker::House < ::Faker::Base
  class << self
    def furniture; end
    def room; end
  end
end

class Faker::IDNumber < ::Faker::Base
  class << self
    def brazilian_citizen_number(legacy_formatted = T.unsafe(nil), formatted: T.unsafe(nil)); end
    def brazilian_cpf(legacy_formatted = T.unsafe(nil), formatted: T.unsafe(nil)); end
    def brazilian_id(legacy_formatted = T.unsafe(nil), formatted: T.unsafe(nil)); end
    def brazilian_rg(legacy_formatted = T.unsafe(nil), formatted: T.unsafe(nil)); end
    def chilean_id; end
    def croatian_id(international: T.unsafe(nil)); end
    def invalid; end
    def invalid_south_african_id_number; end
    def south_african_id_number; end
    def spanish_citizen_number; end
    def spanish_foreign_citizen_number; end
    def ssn_valid; end
    def valid; end
    def valid_south_african_id_number; end

    private

    def _translate(key); end
    def brazilian_citizen_number_checksum_digit(digits); end
    def brazilian_citizen_number_digit(remainder); end
    def brazilian_document_checksum(digits); end
    def brazilian_document_digit(checksum, id: T.unsafe(nil)); end
    def brazilian_id_checksum_digit(digits); end
    def brazilian_id_digit(remainder); end
    def chilean_verification_code(digits); end
    def croatian_id_checksum_digit(digits); end
    def south_african_id_checksum_digit(id_number); end
  end
end

Faker::IDNumber::BRAZILIAN_ID_FORMAT = T.let(T.unsafe(nil), Regexp)
Faker::IDNumber::BRAZILIAN_ID_FROM = T.let(T.unsafe(nil), Integer)
Faker::IDNumber::BRAZILIAN_ID_TO = T.let(T.unsafe(nil), Integer)
Faker::IDNumber::CHECKS = T.let(T.unsafe(nil), String)
Faker::IDNumber::CHILEAN_MODULO = T.let(T.unsafe(nil), Integer)
Faker::IDNumber::INVALID_SSN = T.let(T.unsafe(nil), Array)
Faker::IDNumber::ZA_CITIZENSHIP_DIGITS = T.let(T.unsafe(nil), Array)
Faker::IDNumber::ZA_RACE_DIGIT = T.let(T.unsafe(nil), String)

class Faker::IndustrySegments < ::Faker::Base
  class << self
    def industry; end
    def sector; end
    def sub_sector; end
    def super_sector; end
  end
end

class Faker::Internet < ::Faker::Base
  class << self
    def device_token; end
    def domain_name(legacy_subdomain = T.unsafe(nil), subdomain: T.unsafe(nil), domain: T.unsafe(nil)); end
    def domain_suffix; end
    def domain_word; end
    def email(legacy_name = T.unsafe(nil), legacy_separators = T.unsafe(nil), name: T.unsafe(nil), separators: T.unsafe(nil), domain: T.unsafe(nil)); end
    def fix_umlauts(legacy_string = T.unsafe(nil), string: T.unsafe(nil)); end
    def free_email(legacy_name = T.unsafe(nil), name: T.unsafe(nil)); end
    def ip_v4_address; end
    def ip_v4_cidr; end
    def ip_v6_address; end
    def ip_v6_cidr; end
    def mac_address(legacy_prefix = T.unsafe(nil), prefix: T.unsafe(nil)); end
    def password(legacy_min_length = T.unsafe(nil), legacy_max_length = T.unsafe(nil), legacy_mix_case = T.unsafe(nil), legacy_special_characters = T.unsafe(nil), min_length: T.unsafe(nil), max_length: T.unsafe(nil), mix_case: T.unsafe(nil), special_characters: T.unsafe(nil)); end
    def private_ip_v4_address; end
    def private_net_checker; end
    def private_nets_regex; end
    def public_ip_v4_address; end
    def reserved_net_checker; end
    def reserved_nets_regex; end
    def safe_email(legacy_name = T.unsafe(nil), name: T.unsafe(nil)); end
    def slug(legacy_words = T.unsafe(nil), legacy_glue = T.unsafe(nil), words: T.unsafe(nil), glue: T.unsafe(nil)); end
    def url(legacy_host = T.unsafe(nil), legacy_path = T.unsafe(nil), legacy_scheme = T.unsafe(nil), host: T.unsafe(nil), path: T.unsafe(nil), scheme: T.unsafe(nil)); end
    def user(*args); end
    def user_agent(legacy_vendor = T.unsafe(nil), vendor: T.unsafe(nil)); end
    def user_name(legacy_specifier = T.unsafe(nil), legacy_separators = T.unsafe(nil), specifier: T.unsafe(nil), separators: T.unsafe(nil)); end
    def username(legacy_specifier = T.unsafe(nil), legacy_separators = T.unsafe(nil), specifier: T.unsafe(nil), separators: T.unsafe(nil)); end
    def uuid; end

    private

    def construct_email(local_part, domain_name); end
    def sanitize_email_local_part(local_part); end
  end
end

class Faker::Internet::HTTP < ::Faker::Base
  class << self
    def status_code(group: T.unsafe(nil)); end
  end
end

Faker::Internet::HTTP::STATUS_CODES = T.let(T.unsafe(nil), Hash)
Faker::Internet::HTTP::STATUS_CODES_GROUPS = T.let(T.unsafe(nil), Array)

class Faker::InvalidStatePassed < ::StandardError
  def initialize(msg = T.unsafe(nil)); end
end

class Faker::Invoice < ::Faker::Base
  class << self
    def amount_between(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil)); end
    def creditor_reference(legacy_ref = T.unsafe(nil), ref: T.unsafe(nil)); end
    def reference(legacy_ref = T.unsafe(nil), ref: T.unsafe(nil)); end

    private

    def calculate_weighted_sum(base, weight_factors); end
    def iban_checksum(country_code, account); end
    def kidmod10(base); end
    def method_731(base); end
    def mod10_remainder(number); end
  end
end

class Faker::JapaneseMedia; end

class Faker::JapaneseMedia::Conan < ::Faker::Base
  class << self
    def character; end
    def gadget; end
    def vehicle; end
  end
end

class Faker::JapaneseMedia::Doraemon < ::Faker::Base
  class << self
    def character; end
    def gadget; end
    def location; end
  end
end

class Faker::JapaneseMedia::DragonBall < ::Faker::Base
  class << self
    def character; end
    def planet; end
    def race; end
  end
end

class Faker::JapaneseMedia::Naruto < ::Faker::Base
  class << self
    def character; end
    def demon; end
    def eye; end
    def village; end
  end
end

class Faker::JapaneseMedia::OnePiece < ::Faker::Base
  class << self
    def akuma_no_mi; end
    def character; end
    def island; end
    def location; end
    def quote; end
    def sea; end
  end
end

class Faker::JapaneseMedia::StudioGhibli < ::Faker::Base
  class << self
    def character; end
    def movie; end
    def quote; end
  end
end

class Faker::JapaneseMedia::SwordArtOnline < ::Faker::Base
  class << self
    def game_name; end
    def item; end
    def location; end
    def real_name; end
  end
end

class Faker::Job < ::Faker::Base
  class << self
    def field; end
    def key_skill; end
    def position; end
    def title; end
  end
end

class Faker::Json < ::Faker::Base
  class << self
    def add_depth_to_json(legacy_json = T.unsafe(nil), legacy_width = T.unsafe(nil), legacy_options = T.unsafe(nil), json: T.unsafe(nil), width: T.unsafe(nil), options: T.unsafe(nil)); end
    def shallow_json(legacy_width = T.unsafe(nil), legacy_options = T.unsafe(nil), width: T.unsafe(nil), options: T.unsafe(nil)); end

    private

    def add_hash(key_array, hash, width, options); end
    def add_hash_to_bottom(hash, key_array, width, options); end
    def build_keys_from_array(key_array); end
    def build_shallow_hash(width, options); end
  end
end

class Faker::Kpop < ::Faker::Base
  class << self
    def boy_bands; end
    def girl_groups; end
    def i_groups; end
    def ii_groups; end
    def iii_groups; end
    def solo; end
  end
end

class Faker::Lorem < ::Faker::Base
  class << self
    def character; end
    def characters(legacy_number = T.unsafe(nil), number: T.unsafe(nil), min_alpha: T.unsafe(nil), min_numeric: T.unsafe(nil)); end
    def multibyte; end
    def paragraph(legacy_sentence_count = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), legacy_random_sentences_to_add = T.unsafe(nil), sentence_count: T.unsafe(nil), supplemental: T.unsafe(nil), random_sentences_to_add: T.unsafe(nil)); end
    def paragraph_by_chars(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil)); end
    def paragraphs(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil)); end
    def question(legacy_word_count = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), legacy_random_words_to_add = T.unsafe(nil), word_count: T.unsafe(nil), supplemental: T.unsafe(nil), random_words_to_add: T.unsafe(nil)); end
    def questions(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil)); end
    def sentence(legacy_word_count = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), legacy_random_words_to_add = T.unsafe(nil), word_count: T.unsafe(nil), supplemental: T.unsafe(nil), random_words_to_add: T.unsafe(nil)); end
    def sentences(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil)); end
    def word; end
    def words(legacy_number = T.unsafe(nil), legacy_supplemental = T.unsafe(nil), number: T.unsafe(nil), supplemental: T.unsafe(nil)); end

    private

    def locale_period; end
    def locale_question_mark; end
    def locale_space; end
  end
end

class Faker::LoremFlickr < ::Faker::Base
  class << self
    def colorized_image(legacy_size = T.unsafe(nil), legacy_color = T.unsafe(nil), legacy_search_terms = T.unsafe(nil), legacy_match_all = T.unsafe(nil), size: T.unsafe(nil), color: T.unsafe(nil), search_terms: T.unsafe(nil), match_all: T.unsafe(nil)); end
    def grayscale_image(legacy_size = T.unsafe(nil), legacy_search_terms = T.unsafe(nil), legacy_match_all = T.unsafe(nil), size: T.unsafe(nil), search_terms: T.unsafe(nil), match_all: T.unsafe(nil)); end
    def image(legacy_size = T.unsafe(nil), legacy_search_terms = T.unsafe(nil), legacy_match_all = T.unsafe(nil), size: T.unsafe(nil), search_terms: T.unsafe(nil), match_all: T.unsafe(nil)); end
    def pixelated_image(legacy_size = T.unsafe(nil), legacy_search_terms = T.unsafe(nil), legacy_match_all = T.unsafe(nil), size: T.unsafe(nil), search_terms: T.unsafe(nil), match_all: T.unsafe(nil)); end

    private

    def build_url(size, format, search_terms, match_all); end
  end
end

class Faker::LoremPixel < ::Faker::Base
  class << self
    def image(legacy_size = T.unsafe(nil), legacy_is_gray = T.unsafe(nil), legacy_category = T.unsafe(nil), legacy_number = T.unsafe(nil), legacy_text = T.unsafe(nil), legacy_secure = T.unsafe(nil), size: T.unsafe(nil), is_gray: T.unsafe(nil), category: T.unsafe(nil), number: T.unsafe(nil), text: T.unsafe(nil), secure: T.unsafe(nil)); end
  end
end

class Faker::Markdown < ::Faker::Base
  class << self
    def block_code; end
    def emphasis; end
    def headers; end
    def inline_code; end
    def ordered_list; end
    def random(*args); end
    def sandwich(legacy_sentences = T.unsafe(nil), legacy_repeat = T.unsafe(nil), sentences: T.unsafe(nil), repeat: T.unsafe(nil)); end
    def table; end
    def unordered_list; end

    private

    def available_methods; end
  end
end

class Faker::Marketing < ::Faker::Base
  class << self
    def buzzwords; end
  end
end

class Faker::Measurement < ::Faker::Base
  class << self
    def height(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end
    def length(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end
    def metric_height(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end
    def metric_length(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end
    def metric_volume(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end
    def metric_weight(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end
    def volume(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end
    def weight(legacy_amount = T.unsafe(nil), amount: T.unsafe(nil)); end

    private

    def check_for_plural(text, number); end
    def define_measurement_locale(amount, locale); end
    def ensure_valid_amount(amount); end
    def make_plural(text); end
  end
end

class Faker::Military < ::Faker::Base
  class << self
    def air_force_rank; end
    def army_rank; end
    def coast_guard_rank; end
    def dod_paygrade; end
    def marines_rank; end
    def navy_rank; end
    def space_force_rank; end
  end
end

class Faker::Mountain < ::Faker::Base
  class << self
    def name; end
    def range; end
  end
end

class Faker::Movie < ::Faker::Base
  class << self
    def quote; end
    def title; end
  end
end

class Faker::Movies; end

class Faker::Movies::BackToTheFuture < ::Faker::Base
  class << self
    def character; end
    def date; end
    def quote; end
  end
end

class Faker::Movies::Departed < ::Faker::Base
  class << self
    def actor; end
    def character; end
    def quote; end
  end
end

class Faker::Movies::Ghostbusters < ::Faker::Base
  class << self
    def actor; end
    def character; end
    def quote; end
  end
end

class Faker::Movies::HarryPotter < ::Faker::Base
  class << self
    def book; end
    def character; end
    def house; end
    def location; end
    def quote; end
    def spell; end
  end
end

class Faker::Movies::HitchhikersGuideToTheGalaxy < ::Faker::Base
  class << self
    def character; end
    def location; end
    def marvin_quote; end
    def planet; end
    def quote; end
    def specie; end
    def starship; end
  end
end

class Faker::Movies::Hobbit < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
    def thorins_company; end
  end
end

class Faker::Movies::HowToTrainYourDragon < ::Faker::Base
  class << self
    def character; end
    def dragon; end
    def location; end
  end
end

class Faker::Movies::Lebowski < ::Faker::Base
  class << self
    def actor; end
    def character; end
    def quote; end
  end
end

class Faker::Movies::LordOfTheRings < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
  end
end

class Faker::Movies::PrincessBride < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::Movies::StarWars < ::Faker::Base
  class << self
    def call_number; end
    def call_numbers; end
    def call_sign; end
    def call_squadron; end
    def call_squadrons; end
    def character; end
    def characters; end
    def droid; end
    def droids; end
    def planet; end
    def planets; end
    def quote(legacy_character = T.unsafe(nil), character: T.unsafe(nil)); end
    def specie; end
    def species; end
    def vehicle; end
    def vehicles; end
    def wookie_sentence; end
    def wookie_words; end
    def wookiee_sentence; end
    def wookiee_words; end
  end
end

class Faker::Movies::TheRoom < ::Faker::Base
  class << self
    def actor; end
    def character; end
    def location; end
    def quote; end
  end
end

class Faker::Movies::VForVendetta < ::Faker::Base
  class << self
    def character; end
    def quote; end
    def speech; end
  end
end

class Faker::Music < ::Faker::Base
  class << self
    def album; end
    def band; end
    def chord; end
    def chord_types; end
    def genre; end
    def instrument; end
    def key; end
    def key_types; end
    def key_variants; end
    def keys; end
    def mambo_no_5; end
  end
end

class Faker::Music::GratefulDead < ::Faker::Base
  class << self
    def player; end
    def song; end
  end
end

class Faker::Music::Hiphop < ::Faker::Base
  class << self
    def artist; end
    def groups; end
    def subgenres; end
  end
end

class Faker::Music::Opera < ::Faker::Base
  class << self
    def beethoven; end
    def bellini; end
    def berg; end
    def berlioz; end
    def bizet; end
    def donizetti; end
    def gluck; end
    def gluck_french; end
    def gluck_italian; end
    def gounod; end
    def mozart; end
    def mozart_german; end
    def mozart_italian; end
    def ravel; end
    def rossini; end
    def saint_saens; end
    def schubert; end
    def schumann; end
    def strauss; end
    def verdi; end
    def wagner; end
    def weber; end
  end
end

class Faker::Music::PearlJam < ::Faker::Base
  class << self
    def album; end
    def musician; end
    def song; end
  end
end

class Faker::Music::Phish < ::Faker::Base
  class << self
    def album; end
    def musician; end
    def song; end
  end
end

class Faker::Music::Prince < ::Faker::Base
  class << self
    def album; end
    def band; end
    def lyric; end
    def song; end
  end
end

class Faker::Music::RockBand < ::Faker::Base
  class << self
    def name; end
    def song; end
  end
end

class Faker::Music::Rush < ::Faker::Base
  class << self
    def album; end
    def player; end
  end
end

class Faker::Music::UmphreysMcgee < ::Faker::Base
  class << self
    def song; end
  end
end

class Faker::Name < ::Faker::Base
  class << self
    def female_first_name; end
    def feminine_name; end
    def first_name; end
    def first_name_men; end
    def first_name_neutral; end
    def first_name_women; end
    def gender_neutral_first_name; end
    def initials(legacy_number = T.unsafe(nil), number: T.unsafe(nil)); end
    def last_name; end
    def male_first_name; end
    def masculine_name; end
    def middle_name; end
    def name; end
    def name_with_middle; end
    def neutral_first_name; end
    def prefix; end
    def suffix; end
  end
end

class Faker::Nation < ::Faker::Base
  class << self
    def capital_city; end
    def flag; end
    def language; end
    def national_sport; end
    def nationality; end
  end
end

class Faker::NationalHealthService < ::Faker::Base
  class << self
    def british_number; end
    def check_digit(legacy_number = T.unsafe(nil), number: T.unsafe(nil)); end
  end
end

class Faker::NatoPhoneticAlphabet < ::Faker::Base
  class << self
    def code_word; end
  end
end

class Faker::Number < ::Faker::Base
  class << self
    def between(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil)); end
    def binary(digits: T.unsafe(nil)); end
    def decimal(legacy_l_digits = T.unsafe(nil), legacy_r_digits = T.unsafe(nil), l_digits: T.unsafe(nil), r_digits: T.unsafe(nil)); end
    def decimal_part(legacy_digits = T.unsafe(nil), digits: T.unsafe(nil)); end
    def digit; end
    def hexadecimal(legacy_digits = T.unsafe(nil), digits: T.unsafe(nil)); end
    def leading_zero_number(legacy_digits = T.unsafe(nil), digits: T.unsafe(nil)); end
    def negative(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil)); end
    def non_zero_digit; end
    def normal(legacy_mean = T.unsafe(nil), legacy_standard_deviation = T.unsafe(nil), mean: T.unsafe(nil), standard_deviation: T.unsafe(nil)); end
    def number(legacy_digits = T.unsafe(nil), digits: T.unsafe(nil)); end
    def positive(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil)); end
    def within(legacy_range = T.unsafe(nil), range: T.unsafe(nil)); end

    private

    def generate(count); end
    def greater_than_zero(number); end
    def less_than_zero(number); end
    def should_be(number, method_to_compare); end
  end
end

class Faker::Omniauth < ::Faker::Base
  def initialize(name: T.unsafe(nil), email: T.unsafe(nil)); end

  def email; end
  def first_name; end
  def last_name; end
  def name; end

  class << self
    def apple(name: T.unsafe(nil), email: T.unsafe(nil), uid: T.unsafe(nil)); end
    def facebook(legacy_name = T.unsafe(nil), legacy_email = T.unsafe(nil), legacy_username = T.unsafe(nil), legacy_uid = T.unsafe(nil), name: T.unsafe(nil), email: T.unsafe(nil), username: T.unsafe(nil), uid: T.unsafe(nil)); end
    def github(legacy_name = T.unsafe(nil), legacy_email = T.unsafe(nil), legacy_uid = T.unsafe(nil), name: T.unsafe(nil), email: T.unsafe(nil), uid: T.unsafe(nil)); end
    def google(legacy_name = T.unsafe(nil), legacy_email = T.unsafe(nil), legacy_uid = T.unsafe(nil), name: T.unsafe(nil), email: T.unsafe(nil), uid: T.unsafe(nil)); end
    def linkedin(legacy_name = T.unsafe(nil), legacy_email = T.unsafe(nil), legacy_uid = T.unsafe(nil), name: T.unsafe(nil), email: T.unsafe(nil), uid: T.unsafe(nil)); end
    def twitter(legacy_name = T.unsafe(nil), legacy_nickname = T.unsafe(nil), legacy_uid = T.unsafe(nil), name: T.unsafe(nil), nickname: T.unsafe(nil), uid: T.unsafe(nil)); end

    private

    def city_state; end
    def gender; end
    def image; end
    def random_boolean; end
    def random_number_from_range(range); end
    def timezone; end
  end
end

class Faker::PhoneNumber < ::Faker::Base
  class << self
    def area_code; end
    def cell_phone; end
    def cell_phone_in_e164; end
    def cell_phone_with_country_code; end
    def country_code; end
    def exchange_code; end
    def extension(legacy_length = T.unsafe(nil), length: T.unsafe(nil)); end
    def phone_number; end
    def phone_number_with_country_code; end
    def subscriber_number(legacy_length = T.unsafe(nil), length: T.unsafe(nil)); end
  end
end

class Faker::Placeholdit < ::Faker::Base
  class << self
    def image(legacy_size = T.unsafe(nil), legacy_format = T.unsafe(nil), legacy_background_color = T.unsafe(nil), legacy_text_color = T.unsafe(nil), legacy_text = T.unsafe(nil), size: T.unsafe(nil), format: T.unsafe(nil), background_color: T.unsafe(nil), text_color: T.unsafe(nil), text: T.unsafe(nil)); end

    private

    def generate_color; end
  end
end

class Faker::ProgrammingLanguage < ::Faker::Base
  class << self
    def creator; end
    def name; end
  end
end

class Faker::Quote < ::Faker::Base
  class << self
    def famous_last_words; end
    def fortune_cookie; end
    def jack_handey; end
    def matz; end
    def most_interesting_man_in_the_world; end
    def robin; end
    def singular_siegler; end
    def yoda; end
  end
end

class Faker::Quotes; end

class Faker::Quotes::Chiquito < ::Faker::Base
  class << self
    def expression; end
    def joke; end
    def sentence; end
    def term; end

    private

    def expressions; end
    def jokes; end
    def sentences; end
    def terms; end
  end
end

class Faker::Quotes::Rajnikanth < ::Faker::Base
  class << self
    def joke; end
  end
end

class Faker::Quotes::Shakespeare < ::Faker::Base
  class << self
    def as_you_like_it; end
    def as_you_like_it_quote; end
    def hamlet; end
    def hamlet_quote; end
    def king_richard_iii; end
    def king_richard_iii_quote; end
    def romeo_and_juliet; end
    def romeo_and_juliet_quote; end
  end
end

class Faker::Relationship < ::Faker::Base
  class << self
    def familial(legacy_connection = T.unsafe(nil), connection: T.unsafe(nil)); end
    def in_law; end
    def parent; end
    def sibling; end
    def spouse; end
  end
end

class Faker::Restaurant < ::Faker::Base
  class << self
    def description; end
    def name; end
    def review; end
    def type; end
  end
end

class Faker::Science < ::Faker::Base
  class << self
    def element; end
    def element_state; end
    def element_subcategory; end
    def element_symbol; end
    def modifier; end
    def science(*branches); end
    def scientist; end
    def tool(simple: T.unsafe(nil)); end
  end
end

class Faker::Show < ::Faker::Base
  class << self
    def adult_musical; end
    def kids_musical; end
    def play; end
  end
end

class Faker::SlackEmoji < ::Faker::Base
  class << self
    def activity; end
    def celebration; end
    def custom; end
    def emoji; end
    def food_and_drink; end
    def nature; end
    def objects_and_symbols; end
    def people; end
    def travel_and_places; end
  end
end

class Faker::Source < ::Faker::Base
  class << self
    def hello_world(legacy_lang = T.unsafe(nil), lang: T.unsafe(nil)); end
    def print(legacy_str = T.unsafe(nil), legacy_lang = T.unsafe(nil), str: T.unsafe(nil), lang: T.unsafe(nil)); end
    def print_1_to_10(legacy_lang = T.unsafe(nil), lang: T.unsafe(nil)); end
  end
end

class Faker::SouthAfrica < ::Faker::Base
  class << self
    def cell_phone; end
    def close_corporation_registration_number; end
    def id_number; end
    def invalid_id_number; end
    def listed_company_registration_number; end
    def phone_number; end
    def pty_ltd_registration_number; end
    def trust_registration_number; end
    def valid_id_number; end
    def vat_number; end
  end
end

class Faker::Space < ::Faker::Base
  class << self
    def agency; end
    def agency_abv; end
    def company; end
    def constellation; end
    def distance_measurement; end
    def galaxy; end
    def launch_vehicle; end
    def meteorite; end
    def moon; end
    def nasa_space_craft; end
    def nebula; end
    def planet; end
    def star; end
    def star_cluster; end
  end
end

class Faker::Sports; end

class Faker::Sports::Basketball < ::Faker::Base
  class << self
    def coach; end
    def player; end
    def position; end
    def team; end
  end
end

class Faker::Sports::Football < ::Faker::Base
  class << self
    def coach; end
    def competition; end
    def player; end
    def position; end
    def team; end
  end
end

class Faker::Sports::Volleyball < ::Faker::Base
  class << self
    def coach; end
    def formation; end
    def player; end
    def position; end
    def team; end
  end
end

class Faker::String < ::Faker::Base
  class << self
    def random(legacy_length = T.unsafe(nil), length: T.unsafe(nil)); end

    private

    def char_space_ratio; end
    def select_a(length); end
    def space_or_utf8_char(ratio); end
    def utf8character; end
    def utf8string(length); end
  end
end

class Faker::Stripe < ::Faker::Base
  class << self
    def ccv(legacy_card_type = T.unsafe(nil), card_type: T.unsafe(nil)); end
    def invalid_card(legacy_card_error = T.unsafe(nil), card_error: T.unsafe(nil)); end
    def month; end
    def valid_card(legacy_card_type = T.unsafe(nil), card_type: T.unsafe(nil)); end
    def valid_token(legacy_card_type = T.unsafe(nil), card_type: T.unsafe(nil)); end
    def year; end
  end
end

class Faker::Subscription < ::Faker::Base
  class << self
    def payment_method; end
    def payment_term; end
    def plan; end
    def status; end
    def subscription_term; end
  end
end

class Faker::Superhero < ::Faker::Base
  class << self
    def descriptor; end
    def name; end
    def power; end
    def prefix; end
    def suffix; end
  end
end

class Faker::Tea < ::Faker::Base
  class << self
    def type; end
    def variety(type: T.unsafe(nil)); end
  end
end

class Faker::Team < ::Faker::Base
  class << self
    def creature; end
    def mascot; end
    def name; end
    def sport; end
    def state; end
  end
end

class Faker::Time < ::Faker::Base
  class << self
    def backward(legacy_days = T.unsafe(nil), legacy_period = T.unsafe(nil), legacy_format = T.unsafe(nil), days: T.unsafe(nil), period: T.unsafe(nil), format: T.unsafe(nil)); end
    def between(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), legacy_format = T.unsafe(nil), from:, to:, format: T.unsafe(nil)); end
    def between_dates(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), legacy_period = T.unsafe(nil), legacy_format = T.unsafe(nil), from:, to:, period: T.unsafe(nil), format: T.unsafe(nil)); end
    def forward(legacy_days = T.unsafe(nil), legacy_period = T.unsafe(nil), legacy_format = T.unsafe(nil), days: T.unsafe(nil), period: T.unsafe(nil), format: T.unsafe(nil)); end

    private

    def date_with_random_time(date, period); end
    def get_time_object(time); end
    def hours(period); end
    def minutes; end
    def seconds; end
    def time_with_format(time, format); end
  end
end

Faker::Time::TIME_RANGES = T.let(T.unsafe(nil), Hash)
class Faker::TvShows; end

class Faker::TvShows::AquaTeenHungerForce < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::TvShows::BigBangTheory < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::TvShows::BojackHorseman < ::Faker::Base
  class << self
    def character; end
    def quote; end
    def tongue_twister; end
  end
end

class Faker::TvShows::BreakingBad < ::Faker::Base
  class << self
    def character; end
    def episode; end
  end
end

class Faker::TvShows::Buffy < ::Faker::Base
  class << self
    def actor; end
    def big_bad; end
    def celebrity; end
    def character; end
    def episode; end
    def quote; end
  end
end

class Faker::TvShows::Community < ::Faker::Base
  class << self
    def characters; end
    def quotes; end
  end
end

class Faker::TvShows::DrWho < ::Faker::Base
  class << self
    def actor; end
    def catch_phrase; end
    def character; end
    def quote; end
    def specie; end
    def the_doctor; end
    def villain; end
    def villian; end
  end
end

class Faker::TvShows::DumbAndDumber < ::Faker::Base
  class << self
    def actor; end
    def character; end
    def quote; end
  end
end

class Faker::TvShows::FamilyGuy < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
  end
end

class Faker::TvShows::FinalSpace < ::Faker::Base
  class << self
    def character; end
    def quote; end
    def vehicle; end
  end
end

class Faker::TvShows::Friends < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
  end
end

class Faker::TvShows::Futurama < ::Faker::Base
  class << self
    def character; end
    def hermes_catchphrase; end
    def location; end
    def quote; end
  end
end

class Faker::TvShows::GameOfThrones < ::Faker::Base
  class << self
    def character; end
    def city; end
    def dragon; end
    def house; end
    def quote; end
  end
end

class Faker::TvShows::HeyArnold < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
  end
end

class Faker::TvShows::HowIMetYourMother < ::Faker::Base
  class << self
    def catch_phrase; end
    def character; end
    def high_five; end
    def quote; end
  end
end

class Faker::TvShows::MichaelScott < ::Faker::Base
  class << self
    def quote; end
  end
end

class Faker::TvShows::NewGirl < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::TvShows::ParksAndRec < ::Faker::Base
  class << self
    def character; end
    def city; end
  end
end

class Faker::TvShows::RickAndMorty < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
  end
end

class Faker::TvShows::RuPaul < ::Faker::Base
  class << self
    def queen; end
    def quote; end
  end
end

class Faker::TvShows::Seinfeld < ::Faker::Base
  class << self
    def business; end
    def character; end
    def quote; end
  end
end

class Faker::TvShows::SiliconValley < ::Faker::Base
  class << self
    def app; end
    def character; end
    def company; end
    def email; end
    def invention; end
    def motto; end
    def quote; end
    def url; end
  end
end

class Faker::TvShows::Simpsons < ::Faker::Base
  class << self
    def character; end
    def episode_title; end
    def location; end
    def quote; end
  end
end

class Faker::TvShows::SouthPark < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::TvShows::StarTrek < ::Faker::Base
  class << self
    def character; end
    def location; end
    def specie; end
    def villain; end
  end
end

class Faker::TvShows::Stargate < ::Faker::Base
  class << self
    def character; end
    def planet; end
    def quote; end
  end
end

class Faker::TvShows::StrangerThings < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::TvShows::Suits < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::TvShows::Supernatural < ::Faker::Base
  class << self
    def character; end
    def creature; end
    def weapon; end
  end
end

class Faker::TvShows::TheExpanse < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
    def ship; end
  end
end

class Faker::TvShows::TheFreshPrinceOfBelAir < ::Faker::Base
  class << self
    def actor; end
    def celebrity; end
    def character; end
    def quote; end
  end
end

class Faker::TvShows::TheITCrowd < ::Faker::Base
  class << self
    def actor; end
    def character; end
    def email; end
    def quote; end
  end
end

class Faker::TvShows::TheOffice < ::Faker::Base
  class << self
    def character; end
    def quote; end
  end
end

class Faker::TvShows::TheThickOfIt < ::Faker::Base
  class << self
    def character; end
    def department; end
    def position; end
  end
end

class Faker::TvShows::TwinPeaks < ::Faker::Base
  class << self
    def character; end
    def location; end
    def quote; end
  end
end

class Faker::TvShows::VentureBros < ::Faker::Base
  class << self
    def character; end
    def organization; end
    def quote; end
    def vehicle; end
  end
end

class Faker::Twitter < ::Faker::Base
  class << self
    def screen_name; end
    def status(legacy_include_user = T.unsafe(nil), legacy_include_photo = T.unsafe(nil), include_user: T.unsafe(nil), include_photo: T.unsafe(nil)); end
    def user(legacy_include_status = T.unsafe(nil), legacy_include_email = T.unsafe(nil), include_status: T.unsafe(nil), include_email: T.unsafe(nil)); end

    private

    def created_at; end
    def id; end
    def photo_entity; end
    def status_entities(legacy_include_photo = T.unsafe(nil), include_photo: T.unsafe(nil)); end
    def user_entities; end
    def utc_offset; end
  end
end

class Faker::Types < ::Faker::Base
  class << self
    def character; end
    def complex_rb_hash(legacy_number = T.unsafe(nil), number: T.unsafe(nil)); end
    def random_complex_type; end
    def random_type; end
    def rb_array(legacy_len = T.unsafe(nil), len: T.unsafe(nil)); end
    def rb_hash(legacy_number = T.unsafe(nil), legacy_type = T.unsafe(nil), number: T.unsafe(nil), type: T.unsafe(nil)); end
    def rb_integer(legacy_from = T.unsafe(nil), legacy_to = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil)); end
    def rb_string(legacy_words = T.unsafe(nil), words: T.unsafe(nil)); end

    private

    def titleize(word); end
  end
end

Faker::Types::CHARACTERS = T.let(T.unsafe(nil), Array)
Faker::Types::COMPLEX_TYPES = T.let(T.unsafe(nil), Array)
Faker::Types::SIMPLE_TYPES = T.let(T.unsafe(nil), Array)

class Faker::UniqueGenerator
  def initialize(generator, max_retries); end

  def clear; end
  def exclude(name, arguments, values); end
  def method_missing(name, *arguments); end

  private

  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    def clear; end
    def marked_unique; end
  end
end

class Faker::UniqueGenerator::RetryLimitExceeded < ::StandardError; end

class Faker::University < ::Faker::Base
  class << self
    def greek_alphabet; end
    def greek_organization; end
    def name; end
    def prefix; end
    def suffix; end
  end
end

Faker::VERSION = T.let(T.unsafe(nil), String)

class Faker::Vehicle < ::Faker::Base
  class << self
    def car_options; end
    def car_type; end
    def color; end
    def door_count; end
    def doors; end
    def drive_type; end
    def engine; end
    def engine_size; end
    def fuel_type; end
    def kilometrage(legacy_min = T.unsafe(nil), legacy_max = T.unsafe(nil), min: T.unsafe(nil), max: T.unsafe(nil)); end
    def license_plate(legacy_state_abreviation = T.unsafe(nil), state_abbreviation: T.unsafe(nil)); end
    def make; end
    def make_and_model; end
    def manufacture; end
    def mileage(legacy_min = T.unsafe(nil), legacy_max = T.unsafe(nil), min: T.unsafe(nil), max: T.unsafe(nil)); end
    def model(legacy_make_of_model = T.unsafe(nil), make_of_model: T.unsafe(nil)); end
    def singapore_license_plate; end
    def standard_specs; end
    def style; end
    def transmission; end
    def vin; end
    def year; end

    private

    def calculate_vin_check_digit(vin); end
    def first_eight(number); end
    def last_eight(number); end
    def singapore_checksum(plate_number); end
    def vin_char_to_number(char); end
  end
end

Faker::Vehicle::MILEAGE_MAX = T.let(T.unsafe(nil), Integer)
Faker::Vehicle::MILEAGE_MIN = T.let(T.unsafe(nil), Integer)
Faker::Vehicle::SG_CHECKSUM_CHARS = T.let(T.unsafe(nil), String)
Faker::Vehicle::SG_CHECKSUM_WEIGHTS = T.let(T.unsafe(nil), Array)
Faker::Vehicle::VIN_LETTERS = T.let(T.unsafe(nil), String)
Faker::Vehicle::VIN_MAP = T.let(T.unsafe(nil), String)
Faker::Vehicle::VIN_REGEX = T.let(T.unsafe(nil), Regexp)
Faker::Vehicle::VIN_WEIGHTS = T.let(T.unsafe(nil), String)

class Faker::Verb < ::Faker::Base
  class << self
    def base; end
    def ing_form; end
    def past; end
    def past_participle; end
    def simple_present; end
  end
end

class Faker::WorldCup < ::Faker::Base
  class << self
    def city; end
    def group(legacy_group = T.unsafe(nil), group: T.unsafe(nil)); end
    def roster(legacy_country = T.unsafe(nil), legacy_type = T.unsafe(nil), country: T.unsafe(nil), type: T.unsafe(nil)); end
    def stadium; end
    def team; end
  end
end
