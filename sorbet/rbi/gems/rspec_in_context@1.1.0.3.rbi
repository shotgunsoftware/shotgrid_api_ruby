# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspec_in_context` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module RSpec
  extend ::RSpec::Support::Warnings
  extend ::RSpec::Core::Warnings

  class << self
    def clear_examples; end
    def configuration; end
    def configuration=(_arg0); end
    def configure; end
    def const_missing(name); end
    def context(*args, &example_group_block); end
    def current_example; end
    def current_example=(example); end
    def define_context(name, namespace: T.unsafe(nil), ns: T.unsafe(nil), silent: T.unsafe(nil), print_context: T.unsafe(nil), &block); end
    def describe(*args, &example_group_block); end
    def example_group(*args, &example_group_block); end
    def fcontext(*args, &example_group_block); end
    def fdescribe(*args, &example_group_block); end
    def reset; end
    def shared_context(name, *args, &block); end
    def shared_examples(name, *args, &block); end
    def shared_examples_for(name, *args, &block); end
    def world; end
    def world=(_arg0); end
    def xcontext(*args, &example_group_block); end
    def xdescribe(*args, &example_group_block); end
  end
end

module RSpec::Core
  class << self
    def path_to_executable; end
  end
end

class RSpec::Core::DeprecationError < ::StandardError; end

class RSpec::Core::ExampleGroup
  include ::RSpec::Core::MemoizedHelpers
  include ::RSpec::Core::Pending
  extend ::RSpec::Core::Hooks
  extend ::RSpec::Core::MemoizedHelpers::ClassMethods
  extend ::RSpec::Core::SharedExampleGroup
  extend ::RspecInContext::ContextManagement

  def initialize(inspect_output = T.unsafe(nil)); end

  def described_class; end
  def inspect; end

  private

  def method_missing(name, *args); end

  class << self
    def add_example(example); end
    def before_context_ivars; end
    def children; end
    def context(*args, &example_group_block); end
    def currently_executing_a_context_hook?; end
    def declaration_locations; end
    def define_example_group_method(name, metadata = T.unsafe(nil)); end
    def define_example_method(name, extra_options = T.unsafe(nil)); end
    def define_nested_shared_group_method(new_name, report_label = T.unsafe(nil)); end
    def delegate_to_metadata(*names); end
    def descendant_filtered_examples; end
    def descendants; end
    def describe(*args, &example_group_block); end
    def described_class; end
    def description; end
    def each_instance_variable_for_example(group); end
    def ensure_example_groups_are_configured; end
    def example(*all_args, &block); end
    def example_group(*args, &example_group_block); end
    def examples; end
    def fcontext(*args, &example_group_block); end
    def fdescribe(*args, &example_group_block); end
    def fexample(*all_args, &block); end
    def file_path; end
    def filtered_examples; end
    def find_and_eval_shared(label, name, inclusion_location, *args, &customization_block); end
    def fit(*all_args, &block); end
    def focus(*all_args, &block); end
    def for_filtered_examples(reporter, &block); end
    def fspecify(*all_args, &block); end
    def id; end
    def idempotently_define_singleton_method(name, &definition); end
    def include_context(name, *args, &block); end
    def include_examples(name, *args, &block); end
    def it(*all_args, &block); end
    def it_behaves_like(name, *args, &customization_block); end
    def it_should_behave_like(name, *args, &customization_block); end
    def location; end
    def metadata; end
    def next_runnable_index_for(file); end
    def ordering_strategy; end
    def parent_groups; end
    def pending(*all_args, &block); end
    def remove_example(example); end
    def reset_memoized; end
    def run(reporter = T.unsafe(nil)); end
    def run_after_context_hooks(example_group_instance); end
    def run_before_context_hooks(example_group_instance); end
    def run_examples(reporter); end
    def set_it_up(description, args, registration_collection, &example_group_block); end
    def set_ivars(instance, ivars); end
    def skip(*all_args, &block); end
    def specify(*all_args, &block); end
    def store_before_context_ivars(example_group_instance); end
    def superclass_before_context_ivars; end
    def superclass_metadata; end
    def top_level?; end
    def top_level_description; end
    def traverse_tree_until(&block); end
    def update_inherited_metadata(updates); end
    def with_replaced_metadata(meta); end
    def xcontext(*args, &example_group_block); end
    def xdescribe(*args, &example_group_block); end
    def xexample(*all_args, &block); end
    def xit(*all_args, &block); end
    def xspecify(*all_args, &block); end

    private

    def method_missing(name, *args); end
  end
end

RSpec::Core::ExampleGroup::INSTANCE_VARIABLE_TO_IGNORE = T.let(T.unsafe(nil), Symbol)
class RSpec::Core::ExampleGroup::WrongScopeError < ::NoMethodError; end
RSpec::Core::ExclusionRules = RSpec::Core::FilterRules
RSpec::MODULES_TO_AUTOLOAD = T.let(T.unsafe(nil), Hash)
RSpec::SharedContext = RSpec::Core::SharedContext

module RspecInContext
  include ::RspecInContext::InContext

  class << self
    def included(base); end
  end
end

class RspecInContext::Context < ::Struct
  def block; end
  def block=(_); end
  def name; end
  def name=(_); end
  def namespace; end
  def namespace=(_); end
  def owner; end
  def owner=(_); end
  def silent; end
  def silent=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module RspecInContext::ContextManagement
  def subclass(parent, description, args, registration_collection, &example_group_block); end
end

module RspecInContext::InContext
  mixes_in_class_methods ::RspecInContext::InContext::ClassMethods

  class << self
    def add_context(context_name, owner = T.unsafe(nil), namespace = T.unsafe(nil), silent = T.unsafe(nil), &block); end
    def contexts; end
    def find_context(context_name, namespace = T.unsafe(nil)); end
    def find_context_in_any_namespace(context_name); end
    def included(base); end
    def outside_define_context(context_name, namespace, silent, &block); end
    def remove_context(current_class); end
  end
end

module RspecInContext::InContext::ClassMethods
  def define_context(context_name, namespace: T.unsafe(nil), ns: T.unsafe(nil), silent: T.unsafe(nil), print_context: T.unsafe(nil), &block); end
  def execute_tests; end
  def in_context(context_name, *args, namespace: T.unsafe(nil), ns: T.unsafe(nil), &block); end
  def instanciate_context; end
end

RspecInContext::InContext::GLOBAL_CONTEXT = T.let(T.unsafe(nil), Symbol)
class RspecInContext::NoContextFound < ::StandardError; end
RspecInContext::VERSION = T.let(T.unsafe(nil), String)
