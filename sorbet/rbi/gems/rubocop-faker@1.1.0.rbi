# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-faker` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-faker`.

# source://rubocop-faker//lib/rubocop/faker.rb#3
module RuboCop; end

# source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#4
module RuboCop::Cop; end

# source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#5
module RuboCop::Cop::Faker; end

# Checks that Faker arguments style is based on Faker 2.
# Use keyword arguments instead of positional arguments.
#
# @example
#   # bad
#   Avatar.image(slug, size, format)
#
#   # good
#   Avatar.image(slug: slug, size: size, format: format)
#
# source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#17
class RuboCop::Cop::Faker::DeprecatedArguments < ::RuboCop::Cop::Cop
  include ::RuboCop::Cop::RangeHelp

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#49
  def autocorrect(node); end

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#25
  def on_send(node); end

  private

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#83
  def add_offense_for_arguments(node, argument, message); end

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#118
  def argument_keywords; end

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#109
  def arguments_range(node); end

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#91
  def build_kwargs_style(node, keywords); end

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#101
  def faker_class_name(node); end

  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#66
  def format_message(keyword:, arg:, index:, class_name:, method_name:); end

  # @return [Boolean]
  #
  # source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#62
  def unique_generator_method?(node); end
end

# source://rubocop-faker//lib/rubocop/cop/faker/deprecated_arguments.rb#20
RuboCop::Cop::Faker::DeprecatedArguments::MSG = T.let(T.unsafe(nil), String)

# source://rubocop/1.44.1/lib/rubocop/cop/mixin/allowed_methods.rb#38
RuboCop::Cop::IgnoredMethods = RuboCop::Cop::AllowedMethods

# source://rubocop/1.44.1/lib/rubocop/cop/mixin/allowed_pattern.rb#54
RuboCop::Cop::IgnoredPattern = RuboCop::Cop::AllowedPattern

# RuboCop Faker project namespace
#
# source://rubocop-faker//lib/rubocop/faker.rb#5
module RuboCop::Faker; end

# source://rubocop-faker//lib/rubocop/faker.rb#8
RuboCop::Faker::CONFIG = T.let(T.unsafe(nil), Hash)

# source://rubocop-faker//lib/rubocop/faker.rb#7
RuboCop::Faker::CONFIG_DEFAULT = T.let(T.unsafe(nil), Pathname)

# Because RuboCop doesn't yet support plugins, we have to monkey patch in a
# bit of our configuration.
#
# source://rubocop-faker//lib/rubocop/faker/inject.rb#7
module RuboCop::Faker::Inject
  class << self
    # source://rubocop-faker//lib/rubocop/faker/inject.rb#8
    def defaults!; end
  end
end

# source://rubocop-faker//lib/rubocop/faker.rb#6
RuboCop::Faker::PROJECT_ROOT = T.let(T.unsafe(nil), Pathname)

# source://rubocop-faker//lib/rubocop/faker/version.rb#5
RuboCop::Faker::VERSION = T.let(T.unsafe(nil), String)

# source://rubocop/1.44.1/lib/rubocop/ast_aliases.rb#5
RuboCop::NodePattern = RuboCop::AST::NodePattern

# source://rubocop/1.44.1/lib/rubocop/ast_aliases.rb#6
RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

# source://rubocop/1.44.1/lib/rubocop/ast_aliases.rb#7
RuboCop::Token = RuboCop::AST::Token
